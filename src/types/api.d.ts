/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/livekit/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Serve LiveKit browser SDK bundle */
        get: operations["serve_livekit_client_livekit_client_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/process_query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process a natural-language analytics request
         * @description Converts a user's prompt into SQL, executes it, persists the transcript, and returns processing metadata.
         */
        post: operations["process_query_process_query_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get_sql/{transcript_id}/{chat_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch generated SQL
         * @description Returns the SQL statement produced for a specific assistant response along with safety metadata.
         */
        get: operations["get_sql_query_get_sql__transcript_id___chat_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get_tables/{transcript_id}/{chat_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve tabular query results
         * @description Returns the rows and schema for a processed query result from a specific assistant message.
         */
        get: operations["get_tables_get_tables__transcript_id___chat_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get_description/{transcript_id}/{chat_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve narrative insight
         * @description Returns the narrative description generated by the LLM for an assistant response.
         */
        get: operations["get_description_get_description__transcript_id___chat_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get_graph/{transcript_id}/{chat_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve rendered visualizations
         * @description Returns visualization artifacts (inline HTML or file-backed) associated with a processed query.
         */
        get: operations["get_graph_html_get_graph__transcript_id___chat_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/query_results/poll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Poll for completed assistant query bundles
         * @description Dequeues the next available assistant response for the authenticated user and returns the SQL, tables, description, and graphs in a single payload.
         */
        get: operations["poll_query_results_query_results_poll_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/graphs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List dashboard graphs
         * @description Returns registered dashboard graphs for the authenticated user.
         */
        get: operations["list_dashboard_graphs_dashboard_graphs_get"];
        put?: never;
        /**
         * Register dashboard graph
         * @description Creates or updates metadata for a dashboard graph so it can be queried.
         */
        post: operations["register_dashboard_graph_dashboard_graphs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/graphs/{graph_identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unregister dashboard graph
         * @description Removes a graph from the dashboard metadata store.
         */
        delete: operations["unregister_dashboard_graph_dashboard_graphs__graph_identifier__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/graphs/scope": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update dashboard query scope
         * @description Activate, deactivate, or exclusively scope dashboard graphs for querying.
         */
        post: operations["update_dashboard_scope_dashboard_graphs_scope_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/graphs/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Query dashboard graphs
         * @description Answer natural-language questions against dashboard graph data and metadata.
         */
        post: operations["query_dashboard_graphs_dashboard_graphs_query_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transcripts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List transcripts
         * @description Returns recent transcripts for the authenticated user ordered by last update time.
         */
        get: operations["list_transcripts_transcripts_get"];
        put?: never;
        /**
         * Create a transcript
         * @description Creates a new transcript container that chats can later be appended to.
         */
        post: operations["create_transcript_transcripts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transcripts/{transcript_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get transcript details
         * @description Fetches a transcript's metadata for the authenticated user.
         */
        get: operations["get_transcript_transcripts__transcript_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete transcript
         * @description Permanently deletes a transcript and its chats for the authenticated user.
         */
        delete: operations["delete_transcript_transcripts__transcript_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update transcript
         * @description Renames an existing transcript owned by the authenticated user.
         */
        patch: operations["update_transcript_transcripts__transcript_id__patch"];
        trace?: never;
    };
    "/transcripts/{transcript_id}/chats/{chat_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get chat message
         * @description Returns a single chat entry (user or assistant) from a transcript.
         */
        get: operations["get_chat_transcripts__transcript_id__chats__chat_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Service overview
         * @description Provides high-level API metadata and enumerates available endpoints.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Returns a heartbeat payload that can be used for readiness and liveness probes.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Creates a user account with email, password, and profile attributes.
         */
        post: operations["register_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate a user
         * @description Validates credentials and returns a JWT for subsequent requests.
         */
        post: operations["login_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Current user profile
         * @description Returns profile details and dashboard configuration for the authenticated user.
         */
        get: operations["auth_me_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dashboard graphs
         * @description Returns the stored dashboard visualization entries for the authenticated user.
         */
        get: operations["get_dashboard_dashboard_get"];
        /**
         * Replace dashboard layout
         * @description Overwrites the dashboard visualization list with the provided configuration.
         */
        put: operations["update_dashboard_dashboard_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/livekit/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start LiveKit voice session */
        post: operations["create_livekit_session_livekit_session_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/livekit/session/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** End LiveKit voice session */
        delete: operations["end_livekit_session_livekit_session__session_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/livekit/session/{session_id}/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Issue LiveKit viewer token */
        post: operations["issue_livekit_token_livekit_session__session_id__token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/livekit/session/{session_id}/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve LiveKit session metadata for agent */
        get: operations["get_livekit_session_metadata_livekit_session__session_id__metadata_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/livekit/session/{session_id}/transcripts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ingest transcript message from LiveKit agent */
        post: operations["ingest_livekit_transcript_livekit_session__session_id__transcripts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/livekit/session/{session_id}/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute database query for LiveKit agent */
        post: operations["livekit_query_livekit_session__session_id__query_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AuthBody */
        AuthBody: {
            /** Email */
            email: string;
            /** Password */
            password: string;
        };
        /** DashboardGraphListResponse */
        DashboardGraphListResponse: {
            /** Graphs */
            graphs: components["schemas"]["DashboardGraphMetadataModel"][];
        };
        /** DashboardGraphMetadataModel */
        DashboardGraphMetadataModel: {
            /** Graph Id */
            graph_id?: string | null;
            /** Title */
            title: string;
            /** Graph Type */
            graph_type?: string | null;
            /** Data Source */
            data_source?: string | null;
            /** Data */
            data?: {
                [key: string]: unknown;
            }[] | null;
            /** Description */
            description?: string | null;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Row Count */
            row_count?: number | null;
            /** Fields */
            fields?: string[] | null;
            /** Last Synced At */
            last_synced_at?: string | null;
            /** Figure */
            figure?: {
                [key: string]: unknown;
            } | null;
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
            /** Summary */
            summary?: {
                [key: string]: unknown;
            } | null;
            /** Html Content */
            html_content?: string | null;
        };
        /** DashboardGraphQueryRequest */
        DashboardGraphQueryRequest: {
            /** Question */
            question: string;
        };
        /** DashboardGraphQueryResponse */
        DashboardGraphQueryResponse: {
            /** Type */
            type: string;
            /** Message */
            message: string;
            /** Graphs Used */
            graphs_used?: string[] | null;
            /** Analyses */
            analyses?: {
                [key: string]: unknown;
            }[] | null;
            /** Updated */
            updated?: number | null;
            /** Scope */
            scope?: {
                [key: string]: unknown;
            } | null;
        };
        /** DashboardGraphRegistrationRequest */
        DashboardGraphRegistrationRequest: {
            /** Graph Id */
            graph_id?: string | null;
            /** Title */
            title: string;
            /** Graph Type */
            graph_type?: string | null;
            /** Data Source */
            data_source?: string | null;
            /** Data */
            data?: {
                [key: string]: unknown;
            }[] | null;
            /** Description */
            description?: string | null;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Row Count */
            row_count?: number | null;
            /** Fields */
            fields?: string[] | null;
            /** Last Synced At */
            last_synced_at?: string | null;
            /** Figure */
            figure?: {
                [key: string]: unknown;
            } | null;
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
            /** Summary */
            summary?: {
                [key: string]: unknown;
            } | null;
            /** Html Content */
            html_content?: string | null;
        };
        /** DashboardGraphRegistrationResponse */
        DashboardGraphRegistrationResponse: {
            graph: components["schemas"]["DashboardGraphMetadataModel"];
        };
        /** DashboardGraphsPayload */
        DashboardGraphsPayload: {
            /** Graphs */
            graphs: {
                [key: string]: unknown;
            }[];
        };
        /** DashboardScopeUpdateRequest */
        DashboardScopeUpdateRequest: {
            /** Action */
            action: string;
            /** Graphs */
            graphs: string[];
        };
        /** DashboardScopeUpdateResponse */
        DashboardScopeUpdateResponse: {
            /** Action */
            action: string;
            /** Updated */
            updated: number;
            /** Message */
            message: string;
            /** Graphs */
            graphs?: string[] | null;
        };
        /** DescriptionResponse */
        DescriptionResponse: {
            /** Transcript Id */
            transcript_id: string;
            /** Chat Id */
            chat_id: string;
            /** Description */
            description: string;
            /** Query Executed Successfully */
            query_executed_successfully: boolean;
        };
        /** GraphItem */
        GraphItem: {
            /** Type */
            type: string;
            /** Graph Type */
            graph_type?: string | null;
            /** Title */
            title?: string | null;
            /** Figure */
            figure?: {
                [key: string]: unknown;
            } | null;
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
            /** Summary */
            summary?: {
                [key: string]: unknown;
            } | null;
            /** Query */
            query?: string | null;
            /** Insight */
            insight?: string | null;
            /** Sub Query Index */
            sub_query_index?: number | null;
            /** Html */
            html?: string | null;
        };
        /** GraphsResponse */
        GraphsResponse: {
            /** Transcript Id */
            transcript_id: string;
            /** Chat Id */
            chat_id: string;
            /** Graphs */
            graphs: components["schemas"]["GraphItem"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LiveKitQueryRequest */
        LiveKitQueryRequest: {
            /** Question */
            question: string;
            /** Context */
            context?: string | null;
        };
        /** LiveKitSessionCreateRequest */
        LiveKitSessionCreateRequest: {
            /** Display Name */
            display_name?: string | null;
            /** Transcript Id */
            transcript_id?: string | null;
        };
        /** LiveKitSessionMetadataResponse */
        LiveKitSessionMetadataResponse: {
            /** Session Id */
            session_id: string;
            /** User Id */
            user_id: string;
            /** Metadata */
            metadata: {
                [key: string]: unknown;
            };
            /** Transcript Id */
            transcript_id?: string | null;
        };
        /** LiveKitSessionStartResponse */
        LiveKitSessionStartResponse: {
            /** Session Id */
            session_id: string;
            /** Room Name */
            room_name: string;
            /** Participant Identity */
            participant_identity: string;
            /** Token */
            token: string;
            /** Url */
            url: string;
            /** Display Name */
            display_name: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
            /** Transcripts */
            transcripts: {
                [key: string]: unknown;
            }[];
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /** LiveKitTokenRequest */
        LiveKitTokenRequest: {
            /** Display Name */
            display_name?: string | null;
        };
        /** LiveKitTokenResponse */
        LiveKitTokenResponse: {
            /** Session Id */
            session_id: string;
            /** Room Name */
            room_name: string;
            /** Participant Identity */
            participant_identity: string;
            /** Token */
            token: string;
            /** Url */
            url: string;
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
        };
        /** LiveKitTranscriptIngest */
        LiveKitTranscriptIngest: {
            /**
             * Role
             * @enum {string}
             */
            role: "user" | "assistant" | "system";
            /** Text */
            text: string;
            /** Timestamp */
            timestamp?: string | null;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /** PendingResultBundle */
        PendingResultBundle: {
            /**
             * Status
             * @enum {string}
             */
            status: "pending" | "ready";
            /** Role */
            role?: ("user" | "assistant") | null;
            /** Transcript Id */
            transcript_id?: string | null;
            /** Chat Id */
            chat_id?: string | null;
            /** Chat Id User */
            chat_id_user?: string | null;
            sql?: components["schemas"]["SQLResponse"] | null;
            tables?: components["schemas"]["TablesResponse"] | null;
            description?: components["schemas"]["DescriptionResponse"] | null;
            graphs?: components["schemas"]["GraphsResponse"] | null;
            /** User Message */
            user_message?: string | null;
            /** Description Summary */
            description_summary?: string | null;
            /** Enqueued At */
            enqueued_at?: string | null;
        };
        /** QueryProcessResponse */
        QueryProcessResponse: {
            /** Transcript Id */
            transcript_id: string;
            /** Chat Id User */
            chat_id_user: string;
            /** Chat Id Assistant */
            chat_id_assistant: string;
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Processing Time Seconds */
            processing_time_seconds: number;
            /** Is Relevant */
            is_relevant: boolean;
            /** Error */
            error?: string | null;
        };
        /** QueryRequest */
        QueryRequest: {
            /** Natural Language Query */
            natural_language_query: string;
            /** Transcript Id */
            transcript_id?: string | null;
            /** Title */
            title?: string | null;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /** Conversation Context */
            conversation_context?: string | null;
        };
        /** RegisterBody */
        RegisterBody: {
            /** Email */
            email: string;
            /** Password */
            password: string;
            /** Name */
            name: string;
            /** Mobile */
            mobile: string;
        };
        /** SQLResponse */
        SQLResponse: {
            /** Transcript Id */
            transcript_id: string;
            /** Chat Id */
            chat_id: string;
            /** Sql Query */
            sql_query: string;
            /** Is Safe */
            is_safe: boolean;
            /** Retry Attempts */
            retry_attempts: number;
        };
        /** TablesResponse */
        TablesResponse: {
            /** Transcript Id */
            transcript_id: string;
            /** Chat Id */
            chat_id: string;
            /** Tables */
            tables: {
                [key: string]: unknown;
            }[];
            /** Record Count */
            record_count: number;
        };
        /** TranscriptUpdatePayload */
        TranscriptUpdatePayload: {
            /** Title */
            title?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    serve_livekit_client_livekit_client_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    process_query_process_query_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryProcessResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sql_query_get_sql__transcript_id___chat_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transcript_id: string;
                chat_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SQLResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tables_get_tables__transcript_id___chat_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transcript_id: string;
                chat_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TablesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_description_get_description__transcript_id___chat_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transcript_id: string;
                chat_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescriptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_graph_html_get_graph__transcript_id___chat_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transcript_id: string;
                chat_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GraphsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    poll_query_results_query_results_poll_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PendingResultBundle"];
                };
            };
        };
    };
    list_dashboard_graphs_dashboard_graphs_get: {
        parameters: {
            query?: {
                active_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardGraphListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_dashboard_graph_dashboard_graphs_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardGraphRegistrationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardGraphRegistrationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unregister_dashboard_graph_dashboard_graphs__graph_identifier__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                graph_identifier: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_dashboard_scope_dashboard_graphs_scope_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardScopeUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardScopeUpdateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    query_dashboard_graphs_dashboard_graphs_query_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardGraphQueryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardGraphQueryResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_transcripts_transcripts_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_transcript_transcripts_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_transcript_transcripts__transcript_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transcript_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_transcript_transcripts__transcript_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transcript_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_transcript_transcripts__transcript_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transcript_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TranscriptUpdatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chat_transcripts__transcript_id__chats__chat_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transcript_id: string;
                chat_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    register_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    auth_me_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_dashboard_dashboard_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    update_dashboard_dashboard_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardGraphsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_livekit_session_livekit_session_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LiveKitSessionCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LiveKitSessionStartResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    end_livekit_session_livekit_session__session_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    issue_livekit_token_livekit_session__session_id__token_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LiveKitTokenRequest"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LiveKitTokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_livekit_session_metadata_livekit_session__session_id__metadata_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LiveKitSessionMetadataResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ingest_livekit_transcript_livekit_session__session_id__transcripts_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LiveKitTranscriptIngest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    livekit_query_livekit_session__session_id__query_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LiveKitQueryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
